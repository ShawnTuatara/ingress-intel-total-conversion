// PLUGIN HOOKS ////////////////////////////////////////////////////////
// Plugins may listen to any number of events by specifying the name of
// the event to listen to and handing a function that should be exe-
// cuted when an event occurs. Callbacks will receive additional data
// the event created as their first parameter. The value is always a
// hash that contains more details.
//
// For example, this line will listen for portals to be added and print
// the data generated by the event to the console:
// window.addHook('portalAdded', function(data) { console.log(data) });
//
// Boot hook: booting is handled differently because IITC may not yet
//            be available. Have a look at the plugins in plugins/. All
//            code before “// PLUGIN START” and after “// PLUGIN END” is
//            required to successfully boot the plugin.
//
// Here’s more specific information about each event:
// portalAdded: called when a portal has been received and is about to
//              be added to its layer group. Note that this does NOT
//              mean it is already visible or will be, shortly after.
//              If a portal is added to a hidden layer it may never be
//              shown at all. Injection point is in
//              code/map_data.js#renderPortal near the end. Will hand
//              the Leaflet CircleMarker for the portal in "portal" var.
// portalDetailsUpdated: fired after the details in the sidebar have
//              been (re-)rendered Provides data about the portal that
//              has been selected.
// publicChatDataAvailable: this hook runs after data for any of the
//              public chats has been received and processed, but not
//              yet been displayed. The data hash contains both the un-
//              processed raw ajax response as well as the processed
//              chat data that is going to be used for display.
// doesPortalNeedReRendering: hook is passed the portal details (ent[2]).
//              It is called at the start of code/map_data.js#renderPortal
//              as long as there was an old portal for the guid.
//              Return true from the hook if the portal needs to be re-
//              rendered.
// portalOptions: hook is passed the portal details (ent[2]). Hook is
//              called as part of the code/map_data.js#renderPortal just
//              prior to creating the CircleMarker object. Allows for a
//              plugin to manipulate how the portal will be rendered.
//              Hook callback should return the parts of a CircleMarker's
//              options that the plugin wants to modify. Other properties
//              will be kept as the default renderPortal values.
//              (http://leafletjs.com/reference.html#circlemarker)

window._hooks = {};
window.VALID_HOOKS = [ 'portalAdded', 'portalDetailsUpdated', 'publicChatDataAvailable', 'doesPortalNeedReRendering', 'portalOptions' ];

// Allows for a plugin to return something to the calling function by
// returning that value from the hook callback. If no data has been provided
// by the hook callback then null is returned
window.runHooks = function(event, data) {
  if (VALID_HOOKS.indexOf(event) === -1)
    throw ('Unknown event type: ' + event);

  var hookResponse = null;
  if (!_hooks[event])
    return;
  $.each(_hooks[event], function(ind, callback) {
    hookResponse = callback(data);
    if (hookResponse !== undefined && hookResponse !== null) {
      // break the .each() loop as a plugin has something to give back to the calling function
      return false;
    }
    
    hookResponse = null;
  });

  return hookResponse;
};

window.addHook = function(event, callback) {
  if(VALID_HOOKS.indexOf(event) === -1) throw('Unknown event type: ' + event);
  if(typeof callback !== 'function') throw('Callback must be a function.');

  if(!_hooks[event])
    _hooks[event] = [callback];
  else
    _hooks[event].push(callback);
}
